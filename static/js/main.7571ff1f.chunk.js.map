{"version":3,"sources":["trivia.png","redux/actions/index.js","pages/Login.js","components/Header.js","components/Answers.js","components/Question.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","pages/Configuration.js","App.js","redux/reducers/user.js","redux/reducers/questions.js","redux/reducers/index.js","redux/store/index.js","serviceWorker.js","index.js"],"names":["module","exports","timer","stopCountdown","clearInterval","type","Login","props","state","email","name","statusName","statusEmail","redirect","readForm","bind","validEmail","validName","startGame","e","value","target","checked","this","setState","validationAll","match","length","a","saveLogin","fetchToken","className","src","logo","alt","placeholder","data-testid","onChange","required","to","renderHeader","renderLogin","disabled","onClick","React","Component","connect","dispatch","player","assertions","score","gravatarEmail","localStorage","setItem","JSON","stringify","actions","fetch","then","result","json","data","payload","token","catch","error","user","parse","getItem","emailHash","MD5","Answers","randomNumber","buttonClicked","checkAnswer","setRandom","random","Math","floor","answer","questionsArr","currentQuestion","updateScoreAction","easy","medium","hard","difficulty","stopCountdownAction","pickAnswerAction","dataset","right","wrongs","splice","answerPicked","rightAnswer","data-answer","key","correct_answer","wrongAnswer","incorrect_answers","map","item","index","shufledAnswer","shufleAnswers","renderTrueFalse","bolleanQuestion","multipleQuestion","renderAwnserButtons","questions","Question","nextQuestion","startCountdownAction","timesUp","history","nextQuestionAction","saveRankAction","push","html","txt","document","createElement","innerHTML","decodeHtml","question","category","renderNextButton","setInterval","ranking","current","picture","newRanking","withRouter","Game","getQuestions","loading","requestQuestionsSucces","requestQuestionsFail","fetchQuestions","Feedback","console","log","renderFeedbackMessage","Ranking","sortedRanking","sort","b","userRank","Configuration","App","exact","path","component","INNITIAL_STATE","avatarURL","action","results","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7571ff1f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","import { MD5 } from 'crypto-js';\n\nexport const REQUEST_QUESTIONS = 'REQUEST_QUESTIONS';\nexport const REQUEST_QUESTIONS_SUCCESS = 'REQUEST_QUESTIONS_SUCCESS';\nexport const REQUEST_QUESTIONS_FAIL = 'REQUEST_QUESTIONS_FAIL';\nexport const SAVE_LOGIN = 'SAVE_LOGIN';\nexport const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const REQUEST_TOKEN_SUCCESS = 'REQUEST_TOKEN_SUCCESS';\nexport const REQUEST_TOKEN_ERROR = 'REQUEST_TOKEN_ERROR';\nexport const NEXT_QUESTION = 'NEXT_QUESTION';\nexport const SET_INNITIAL_TIME = 'SET_INITIAL_TIME';\nexport const UPDATE_CLOCK = 'UPDATE_CLOCK';\nexport const STOP_COUNTDOWN = 'STOP_COUNTDOWN';\nexport const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const PICK_ANSWER = 'PICK_ANSWER';\n\nconst questionsURL = 'https://opentdb.com/api.php?amount=5&token=';\nconst tokenURL = 'https://opentdb.com/api_token.php?command=request';\n\nexport const saveLogin = (email, name) => {\n  const state = {\n    player: {\n      name,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: email,\n    },\n  };\n\n  localStorage.setItem('state', JSON.stringify(state));\n  return {\n    type: SAVE_LOGIN,\n    email,\n    name,\n  };\n};\n\nexport const pickAnswer = () => ({\n  type: PICK_ANSWER,\n});\n\nexport const requestToken = () => ({\n  type: REQUEST_TOKEN,\n});\n\nexport const requestTokenSuccess = (payload) => ({\n  type: REQUEST_TOKEN_SUCCESS,\n  payload,\n});\n\nexport const requestTokenError = (payload) => ({\n  type: REQUEST_TOKEN_ERROR,\n  payload,\n});\n\nexport const fetchToken = () => (dispatch) => {\n  dispatch(requestToken());\n  return fetch(tokenURL)\n    .then((result) => result.json())\n    .then((data) => {\n      dispatch(requestTokenSuccess(data));\n      localStorage.setItem('token', data.token);\n    })\n    .catch((error) => dispatch(requestTokenError(error)));\n};\n\nconst requestQuestions = (payload) => ({\n  type: REQUEST_QUESTIONS,\n  payload,\n});\n\nconst requestQuestionsSucces = (payload) => ({\n  type: REQUEST_QUESTIONS_SUCCESS,\n  payload,\n});\n\nconst requestQuestionsFail = (payload) => ({\n  type: REQUEST_QUESTIONS_FAIL,\n  payload,\n});\n\nexport const fetchQuestions = (token) => (dispatch) => {\n  dispatch(requestQuestions());\n  return fetch(`${questionsURL}${token}`)\n    .then((result) => result.json())\n    .then((data) => dispatch(requestQuestionsSucces(data)))\n    .catch((error) => dispatch(requestQuestionsFail(error)));\n};\n\nexport const nextQuestion = () => ({\n  type: NEXT_QUESTION,\n});\nconst setInnitialTime = () => ({\n  type: SET_INNITIAL_TIME,\n});\n\nconst updateClock = () => ({\n  type: UPDATE_CLOCK,\n});\n\nlet timer = null;\nexport const startCountdown = () => (dispatch) => { //  codigo adaptado de https://medium.com/@machadogj/timers-in-react-with-redux-apps-9a5a722162e8\n  const sec = 1000;\n  dispatch(setInnitialTime());\n  timer = setInterval(() => dispatch(updateClock()), sec);\n};\n\nexport const stopCountdown = () => {\n  clearInterval(timer);\n  return { type: STOP_COUNTDOWN };\n};\n\nexport const updateScore = (payload) => {\n  const state = JSON.parse(localStorage.getItem('state'));\n  state.player.score += payload;\n  state.player.assertions += 1;\n  localStorage.setItem('state', JSON.stringify(state));\n  return {\n    type: UPDATE_SCORE,\n    payload,\n  };\n};\n\nexport const saveRank = () => () => {\n  const state = JSON.parse(localStorage.getItem('state'));\n  const ranking = JSON.parse(localStorage.getItem('ranking'));\n  const emailHash = MD5(state.player.gravatarEmail);\n  const current = {\n    name: state.player.name,\n    score: state.player.score,\n    picture: `https://www.gravatar.com/avatar/${emailHash}`,\n  };\n  if (!ranking) {\n    localStorage.setItem('ranking', JSON.stringify([current]));\n  } else {\n    const newRanking = [...ranking, current];\n    localStorage.setItem('ranking', JSON.stringify(newRanking));\n  }\n};\n","import React from 'react';\nimport '../css/Login.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link, Redirect } from 'react-router-dom';\nimport logo from '../trivia.png';\nimport * as actions from '../redux/actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: '',\n      name: '',\n      statusName: false,\n      statusEmail: false,\n      redirect: null,\n    };\n\n    this.readForm = this.readForm.bind(this);\n    this.validEmail = this.validEmail.bind(this);\n    this.validName = this.validName.bind(this);\n    this.startGame = this.startGame.bind(this);\n  }\n\n  readForm(e) {\n    const value = e.target.type === 'checkbox' ? e.target.checked : e.target.value;\n    this.setState({\n      [e.target.name]: value,\n    }, () => this.validationAll());\n  }\n\n  // lógica adaptada de https://pt.stackoverflow.com/questions/1386/express%C3%A3o-regular-para-valida%C3%A7%C3%A3o-de-e-mail\n  validEmail() {\n    const { email } = this.state;\n    if (!email.match(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/igm)) {\n      this.setState({\n        statusEmail: false,\n      });\n    } else {\n      this.setState({\n        statusEmail: true,\n      });\n    }\n  }\n\n  validName() {\n    const { name } = this.state;\n    const number = 1;\n    if (name.length < number) {\n      this.setState({\n        statusName: false,\n      });\n    } else {\n      this.setState({\n        statusName: true,\n      });\n    }\n  }\n\n  validationAll() {\n    this.validEmail();\n    this.validName();\n  }\n\n  async startGame() {\n    const { saveLogin, fetchToken } = this.props;\n    const { email, name } = this.state;\n    saveLogin(email, name);\n    await fetchToken();\n    this.setState({\n      redirect: '/game',\n    });\n  }\n\n  renderHeader() {\n    return (\n      <header className=\"login-header-container\">\n        <img src={ logo } className=\"login-logo\" alt=\"logo\" />\n        <p className=\"login-text\"> SUA VEZ </p>\n      </header>\n    );\n  }\n\n  renderLogin() {\n    return (\n      <>\n        <div className=\"input\">\n          <input\n            type=\"input\"\n            name=\"name\"\n            placeholder=\"Digite seu nome\"\n            data-testid=\"input-player-name\"\n            onChange={ this.readForm }\n            required\n          />\n        </div>\n        <div className=\"input\">\n          <input\n            type=\"email\"\n            name=\"email\"\n            placeholder=\"Digite seu e-mail\"\n            data-testid=\"input-gravatar-email\"\n            onChange={ this.readForm }\n            required\n          />\n        </div>\n      </>\n    );\n  }\n\n  render() {\n    const { statusName, statusEmail, redirect } = this.state;\n    if (redirect) {\n      return (\n        <Redirect to={ redirect } />\n      );\n    }\n    return (\n      <div className=\"total-page\">\n        <section className=\"login-container\">\n          {this.renderHeader()}\n          {this.renderLogin()}\n          <div className=\"input\">\n            <p className=\"butons-login-container\">\n              <button\n                type=\"button\"\n                data-testid=\"btn-play\"\n                disabled={ !statusEmail || !statusName }\n                onClick={ this.startGame }\n              >\n                Jogar\n              </button>\n            </p>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveLogin: (email, name) => dispatch(actions.saveLogin(email, name)),\n  fetchToken: () => dispatch(actions.fetchToken()),\n});\n\nLogin.propTypes = {\n  saveLogin: PropTypes.func,\n  fetchToken: PropTypes.func,\n}.isRequired;\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { MD5 } from 'crypto-js';\nimport '../css/Header.css';\n\nfunction Header() {\n  const state = JSON.parse(localStorage.getItem('state'));\n  const { name, email, score } = state.player;\n  const emailHash = MD5(email);\n\n  return (\n    <header className=\"header-container\">\n      <img\n        data-testid=\"header-profile-picture\"\n        src={ `https://www.gravatar.com/avatar/${emailHash}` }\n        alt=\"foto do usuario\"\n        className=\"header-picture-circle\"\n      />\n\n      <h2\n        data-testid=\"header-player-name\"\n      >\n        {name}\n      </h2>\n      <h2\n        data-testid=\"header-score\"\n      >\n        {score}\n      </h2>\n\n    </header>\n  );\n}\n\nconst mapStateToProps = (state) => ({\n  name: state.user.name,\n  email: state.user.email,\n  score: state.user.score,\n});\n\nHeader.propTypes = {\n  name: PropTypes.string,\n  score: PropTypes.number,\n  email: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, null)(Header);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as actions from '../redux/actions';\nimport '../css/Game.css';\n\nclass Answers extends Component {\n  constructor() {\n    super();\n    this.state = {\n      randomNumber: 0,\n    };\n    this.buttonClicked = this.buttonClicked.bind(this);\n    this.checkAnswer = this.checkAnswer.bind(this);\n  }\n\n  componentDidMount() {\n    this.setRandom();\n  }\n\n  setRandom() {\n    const max = 4;\n    const random = Math.floor(Math.random() * max);\n    this.setState({ randomNumber: random });\n  }\n\n  checkAnswer(answer) {\n    const { timer, questionsArr, currentQuestion, updateScoreAction } = this.props;\n    if (answer === 'incorret') {\n      return;\n    }\n    const obj = {\n      easy: 1,\n      medium: 2,\n      hard: 3,\n    };\n    const base = 10;\n    const dificulty = questionsArr[currentQuestion].difficulty;\n    const score = (base + (timer * obj[dificulty]));\n    updateScoreAction(score);\n  }\n\n  buttonClicked({ target }) {\n    const { stopCountdownAction, pickAnswerAction } = this.props;\n    stopCountdownAction();\n    pickAnswerAction();\n    this.checkAnswer(target.dataset.answer);\n  }\n\n  shufleAnswers(right, wrongs) {\n    const { randomNumber } = this.state;\n    wrongs.splice(randomNumber, 0, right);\n    return wrongs;\n  }\n\n  multipleQuestion() {\n    const { questionsArr, currentQuestion, answerPicked } = this.props;\n    const rightAnswer = (\n      <button\n        type=\"button\"\n        data-testid=\"correct-answer\"\n        data-answer=\"correct\"\n        key=\"right\"\n        onClick={ this.buttonClicked }\n        className={ answerPicked ? 'correct' : '' }\n        disabled={ answerPicked }\n      >\n        { questionsArr[currentQuestion].correct_answer }\n      </button>);\n    const wrongAnswer = questionsArr[currentQuestion].incorrect_answers\n      .map((item, index) => (\n        <button\n          type=\"button\"\n          key={ `wrong-${index}` }\n          data-testid={ `wrong-answer-${index}` }\n          data-answer=\"incorret\"\n          onClick={ this.buttonClicked }\n          className={ answerPicked ? 'wrong' : '' }\n          disabled={ answerPicked }\n        >\n          { item }\n        </button>\n      ));\n    const shufledAnswer = this.shufleAnswers(rightAnswer, wrongAnswer);\n    return (\n      <div className=\"answers\">\n        { shufledAnswer }\n      </div>\n    );\n  }\n\n  bolleanQuestion() {\n    const { questionsArr, currentQuestion, answerPicked } = this.props;\n    if (questionsArr[currentQuestion].correct_answer) return this.renderTrueFalse();\n    return (\n      <div className=\"answers\">\n        <button\n          type=\"button\"\n          data-testid=\"wrong-answer-0\"\n          data-answer=\"incorret\"\n          onClick={ this.buttonClicked }\n          className={ answerPicked ? 'wrong' : '' }\n          disabled={ answerPicked }\n        >\n          True\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"correct-answer\"\n          data-answer=\"correct\"\n          onClick={ this.buttonClicked }\n          className={ answerPicked ? 'correct' : '' }\n          disabled={ answerPicked }\n        >\n          False\n        </button>\n      </div>\n    );\n  }\n\n  renderTrueFalse() {\n    const { answerPicked } = this.props;\n    return (\n      <div className=\"answers\">\n        <button\n          type=\"button\"\n          data-testid=\"correct-answer\"\n          data-answer=\"correct\"\n          onClick={ this.buttonClicked }\n          className={ answerPicked ? 'correct' : '' }\n          disabled={ answerPicked }\n        >\n          True\n        </button>\n        <button\n          type=\"button\"\n          data-testid=\"wrong-answer-0\"\n          data-answer=\"incorret\"\n          onClick={ this.buttonClicked }\n          className={ answerPicked ? 'wrong' : '' }\n          disabled={ answerPicked }\n        >\n          False\n        </button>\n      </div>\n    );\n  }\n\n  renderAwnserButtons() {\n    const { questionsArr, currentQuestion } = this.props;\n    if (questionsArr[currentQuestion].type === 'boolean') return this.bolleanQuestion();\n    return this.multipleQuestion();\n  }\n\n  render() {\n    return (\n      <div className=\"container-answers-buttons\">\n        { this.renderAwnserButtons() }\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionsArr: state.questions.questionsArr,\n  currentQuestion: state.questions.currentQuestion,\n  answerPicked: state.questions.answerPicked,\n  timer: state.questions.timer,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  stopCountdownAction: () => dispatch(actions.stopCountdown()),\n  updateScoreAction: (score) => dispatch(actions.updateScore(score)),\n  pickAnswerAction: () => dispatch(actions.pickAnswer()),\n});\n\nAnswers.propTypes = {\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  currentQuestion: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Answers);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport * as actions from '../redux/actions';\nimport Answers from './Answers';\nimport '../css/Game.css';\n\nclass Question extends Component {\n  constructor() {\n    super();\n    this.nextQuestion = this.nextQuestion.bind(this);\n  }\n\n  componentDidMount() {\n    const { startCountdownAction } = this.props;\n    startCountdownAction();\n  }\n\n  componentDidUpdate() {\n    const { timer, answerPicked } = this.props;\n    if (timer <= 0 && answerPicked === false) {\n      this.timesUp();\n    }\n  }\n\n  timesUp() {\n    const { stopCountdownAction, pickAnswerAction } = this.props;\n    stopCountdownAction();\n    pickAnswerAction();\n    // this.checkAnswer('incorrect');\n  }\n\n  nextQuestion() {\n    const {\n      currentQuestion,\n      history,\n      nextQuestionAction,\n      saveRankAction,\n      startCountdownAction,\n      pickAnswerAction,\n    } = this.props;\n    const numOfQuestions = 4;\n    pickAnswerAction();\n    if (currentQuestion >= numOfQuestions) {\n      saveRankAction();\n      history.push('/feedback');\n    } else {\n      nextQuestionAction();\n      startCountdownAction();\n    }\n  }\n\n  decodeHtml(html) { // https://stackoverflow.com/questions/7394748/whats-the-right-way-to-decode-a-string-that-has-special-html-entities-in-it\n    const txt = document.createElement('textarea');\n    txt.innerHTML = html;\n    return txt.value;\n  }\n\n  renderNextButton() {\n    return (\n      <button type=\"button\" data-testid=\"btn-next\" onClick={ this.nextQuestion }>\n        Próxima\n      </button>\n    );\n  }\n\n  render() {\n    const { questionsArr, currentQuestion, timer, answerPicked } = this.props;\n    return (\n      <div className=\"question-container\">\n        <p data-testid=\"question-text\" className=\"text-game\">\n          <p className=\"question-bold\">Question </p>\n          { this.decodeHtml(questionsArr[currentQuestion].question) }\n        </p>\n        <p data-testid=\"question-category\" className=\"text-game\">\n          <p className=\"question-bold\">Category </p>\n          { this.decodeHtml(questionsArr[currentQuestion].category) }\n        </p>\n        <Answers />\n\n        {answerPicked ? this.renderNextButton() : ''}\n        <h3>\n          { timer }\n        </h3>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  questionsArr: state.questions.questionsArr,\n  currentQuestion: state.questions.currentQuestion,\n  timer: state.questions.timer,\n  answerPicked: state.questions.answerPicked,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  startCountdownAction: () => dispatch(actions.startCountdown()),\n  stopCountdownAction: () => dispatch(actions.stopCountdown()),\n  nextQuestionAction: () => dispatch(actions.nextQuestion()),\n  saveRankAction: () => dispatch(actions.saveRank()),\n  pickAnswerAction: () => dispatch(actions.pickAnswer()),\n});\n\nQuestion.propTypes = {\n  questionsArr: PropTypes.arrayOf(PropTypes.object),\n  currentQuestion: PropTypes.number,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Question));\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Question from '../components/Question';\nimport { fetchQuestions } from '../redux/actions';\nimport '../css/Game.css';\n\nclass Game extends Component {\n  componentDidMount() {\n    const { getQuestions } = this.props;\n    const token = localStorage.getItem('token');\n    if (token) {\n      getQuestions(token);\n    } else {\n      getQuestions('');\n    }\n  }\n\n  render() {\n    const { loading, questionsArr } = this.props;\n    if (!questionsArr.length) return (<div>Loading</div>);\n    if (loading) return <h3>Loading</h3>;\n    return (\n      <div>\n        <Header />\n        <div className=\"game\">\n          <Question />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  loading: state.questions.loading,\n  questionsArr: state.questions.questionsArr,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getQuestions: (token) => dispatch(fetchQuestions(token)),\n});\n\nGame.propTypes = {\n  getQuestions: PropTypes.func,\n  loading: PropTypes.bool,\n}.isrequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport '../css/Feedback.css';\n\nclass Feedback extends Component {\n  renderFeedbackMessage() {\n    const number = 3;\n    const { assertions } = JSON.parse(localStorage.getItem('state')).player;\n    console.log(assertions);\n    if (assertions < number) {\n      return (\n        <h3 data-testid=\"feedback-text\">Podia ser melhor...</h3>\n      );\n    }\n    if (assertions >= number) return <h3 data-testid=\"feedback-text\">Mandou bem!</h3>;\n  }\n\n  render() {\n    const { score } = this.props;\n    const { assertions } = JSON.parse(localStorage.getItem('state')).player;\n    return (\n      <div>\n        <Header />\n        <section>\n          { this.renderFeedbackMessage() }\n          <div>\n            <span>Score: </span>\n            <span data-testid=\"feedback-total-score\">{ score }</span>\n            {' '}\n            <br />\n            <span>Acertos: </span>\n            <span data-testid=\"feedback-total-question\">{ assertions }</span>\n            {' '}\n            <br />\n            <Link to=\"/\">\n              <button type=\"button\" data-testid=\"btn-play-again\">Jogar novamente</button>\n            </Link>\n            <Link to=\"/ranking\">\n              <button type=\"button\" data-testid=\"btn-ranking\">Ver Ranking</button>\n            </Link>\n          </div>\n        </section>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  score: state.user.score,\n});\n\nFeedback.propTypes = {\n  score: PropTypes.number,\n}.isrequired;\n\nexport default connect(mapStateToProps)(Feedback);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../css/Ranking.css';\n\nexport default class Ranking extends Component {\n  render() {\n    const rankingData = JSON.parse(localStorage.getItem('ranking'));\n    const sortedRanking = rankingData.sort((a, b) => b.score - a.score);\n\n    return (\n      <div>\n        <header data-testid=\"ranking-title\" className=\"header-ranking\">\n          <p>Ranking</p>\n        </header>\n\n        <div className=\"ranking-data-container\">\n          <ul>\n            {sortedRanking.map((userRank, index) => (\n              <li key={ index } className=\"ranking-card\">\n                <img\n                  src={ userRank.picture }\n                  alt=\"foto do usuario\"\n                  className=\"user-image\"\n                />\n                <h2 data-testid={ `player-name-${index}` }>{ userRank.name }</h2>\n                <h2 data-testid={ `player-score-${index}` }>{ userRank.score }</h2>\n              </li>))}\n          </ul>\n        </div>\n\n        <Link to=\"/\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-go-home\"\n            className=\"button-play-again\"\n          >\n            Jogar novamente\n          </button>\n        </Link>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class Configuration extends Component {\n  render() {\n    return (\n      <div>\n        <h1 data-testid=\"settings-title\">Configurações</h1>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { Switch, Route } from 'react-router';\nimport './css/App.css';\nimport Login from './pages/Login';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Configuration from './pages/Configuration';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ Login } />\n      <Route path=\"/game\" component={ Game } />\n      <Route path=\"/feedback\" component={ Feedback } />\n      <Route path=\"/ranking\" component={ Ranking } />\n      <Route path=\"/config\" component={ Configuration } />\n    </Switch>\n  );\n}\n","import { SAVE_LOGIN,\n  REQUEST_TOKEN_SUCCESS,\n  REQUEST_TOKEN_ERROR,\n  UPDATE_SCORE,\n} from '../actions';\n\nconst INNITIAL_STATE = {\n  name: '',\n  email: '',\n  score: 0,\n  avatarURL: '',\n  token: '',\n};\n\nfunction user(state = INNITIAL_STATE, action) {\n  switch (action.type) {\n  case SAVE_LOGIN:\n    return {\n      ...state,\n      email: action.email,\n      name: action.name,\n    };\n  case REQUEST_TOKEN_SUCCESS:\n    return {\n      ...state,\n      token: action.payload.token,\n    };\n  case REQUEST_TOKEN_ERROR:\n    return {\n      ...state,\n      error: action.payload,\n    };\n  case UPDATE_SCORE:\n    return { ...state, score: state.score + action.payload };\n  default:\n    return state;\n  }\n}\n\nexport default user;\n","import {\n  REQUEST_QUESTIONS,\n  REQUEST_QUESTIONS_FAIL,\n  REQUEST_QUESTIONS_SUCCESS,\n  NEXT_QUESTION,\n  UPDATE_CLOCK,\n  PICK_ANSWER,\n} from '../actions';\n\nconst INNITIAL_STATE = {\n  questionsArr: [],\n  currentQuestion: 0,\n  loading: true,\n  timer: 30,\n  answerPicked: false,\n};\n\nfunction questions(state = INNITIAL_STATE, action) {\n  switch (action.type) {\n  case REQUEST_QUESTIONS:\n    return { ...state, loading: true };\n  case REQUEST_QUESTIONS_SUCCESS:\n    return {\n      ...state,\n      questionsArr: [...action.payload.results],\n      loading: false,\n      currentQuestion: 0,\n    };\n  case REQUEST_QUESTIONS_FAIL:\n    return { ...state, error: action.payload, loading: false };\n  case PICK_ANSWER:\n    return { ...state, answerPicked: !state.answerPicked };\n  case NEXT_QUESTION:\n    return { ...state, currentQuestion: state.currentQuestion + 1 };\n  case 'SET_INITIAL_TIME':\n    return { ...state, timer: 30 };\n  case UPDATE_CLOCK:\n    return { ...state, timer: state.timer - 1 };\n  default:\n    return state;\n  }\n}\n\nexport default questions;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport questions from './questions';\n\nconst reducer = combineReducers({ user, questions });\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './redux/store';\nimport * as serviceWorker from './serviceWorker';\nimport './css/App.css';\n\nReactDOM.render(\n  <Provider store={ store }>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}